import { BaseUnit, WorkerUnit, CombatUnit } from '../units/BaseUnit.js';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–∞–Ω–∏—è
export const BUILDING_STATES = {
  CONSTRUCTION: 'construction',
  IDLE: 'idle',
  PRODUCING: 'producing',
  DESTROYED: 'destroyed'
};

// –¢–∏–ø—ã –∑–¥–∞–Ω–∏–π
export const BUILDING_TYPES = {
  STORAGE: 'storage',
  UNIT_FACTORY: 'unitFactory',
  RESEARCH: 'research',
  DEFENSE: 'defense'
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π
const BUILDING_ICONS = {
  [BUILDING_TYPES.STORAGE]: 'üè†',
  [BUILDING_TYPES.UNIT_FACTORY]: '‚öîÔ∏è',
  [BUILDING_TYPES.RESEARCH]: 'üìö',
  [BUILDING_TYPES.DEFENSE]: 'üõ°Ô∏è'
};

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
export class BuildingController {
  constructor(scene, x, y, buildingType) {
    this.scene = scene;
    this.x = x;
    this.y = y;
    this.type = buildingType;
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
    this.particles = scene.add.particles('particle');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.state = BUILDING_STATES.CONSTRUCTION;
    this.constructionProgress = 0;
    this.constructionTime = buildingType.buildTime || 5;
    this.hp = this.maxHP = buildingType.hp || 100;
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.createVisuals();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    this.startConstructionAnimation();
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∑–¥–∞–Ω–∏—è
  getBuildingType() {
    return this.type.type || null;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  isBuildingType(type) {
    return this.getBuildingType() === type;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–¥–∞–Ω–∏—è
  static createController(scene, x, y, buildingType) {
    switch (buildingType.type) {
      case BUILDING_TYPES.STORAGE:
        return new StorageBuildingController(scene, x, y, buildingType);
      case BUILDING_TYPES.UNIT_FACTORY:
        return new UnitFactoryController(scene, x, y, buildingType);
      case BUILDING_TYPES.RESEARCH:
        return new ResearchLabController(scene, x, y, buildingType);
      default:
        return new BuildingController(scene, x, y, buildingType);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–æ–π —é–Ω–∏—Ç–æ–≤
  isUnitFactory() {
    return this.isBuildingType(BUILDING_TYPES.UNIT_FACTORY);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
  isStorage() {
    return this.isBuildingType(BUILDING_TYPES.STORAGE);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–¥–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π
  isResearchLab() {
    return this.isBuildingType(BUILDING_TYPES.RESEARCH);
  }

  createVisuals() {
    const size = this.type.size * 32;
    const centerX = this.x * 32 + size/2;
    const centerY = this.y * 32 + size/2;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.container = this.scene.add.container(0, 0);
    
    // –¢–µ–Ω—å –∑–¥–∞–Ω–∏—è
    this.shadow = this.scene.add.rectangle(
      centerX + 4,
      centerY + 4,
      size - 4,
      size - 4,
      0x000000,
      0.3
    ).setDepth(19);
    this.container.add(this.shadow);

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ –∑–¥–∞–Ω–∏—è
    this.sprite = this.scene.add.rectangle(
      centerX,
      centerY,
      size,
      size,
      this.type.color
    ).setDepth(20);
    this.container.add(this.sprite);

    // –†–∞–º–∫–∞ –∑–¥–∞–Ω–∏—è
    this.border = this.scene.add.rectangle(
      centerX,
      centerY,
      size,
      size,
      0xffffff,
      0
    ).setStrokeStyle(2, 0xffffff, 0.5).setDepth(21);
    this.container.add(this.border);

    // –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è
    this.icon = this.scene.add.text(
      centerX,
      centerY - 10,
      BUILDING_ICONS[this.type.type] || 'üè¢',
      { fontSize: '24px', fontFamily: 'sans-serif' }
    ).setOrigin(0.5).setDepth(24);
    this.container.add(this.icon);

    // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
    this.label = this.scene.add.text(
      centerX,
      centerY + 15,
      this.type.name,
      { 
        fontSize: '14px',
        color: '#fff',
        fontFamily: 'sans-serif',
        backgroundColor: '#00000088',
        padding: { x: 4, y: 2 }
      }
    ).setOrigin(0.5).setDepth(24);
    this.container.add(this.label);

    // –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–ª–æ—Å–æ–∫ HP –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.bars = this.scene.add.container(0, 0).setDepth(22);
    this.container.add(this.bars);

    // –ü–æ–ª–æ—Å–∫–∞ HP
    this.hpBarBg = this.scene.add.rectangle(
      centerX,
      centerY - size/2 - 8,
      size - 8,
      6,
      0x000000,
      0.8
    );
    this.bars.add(this.hpBarBg);
    
    this.hpBar = this.scene.add.rectangle(
      centerX - (size-8)/2,
      centerY - size/2 - 8,
      size - 8,
      6,
      0x00ff00
    ).setOrigin(0, 0.5);
    this.bars.add(this.hpBar);

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.progressBarBg = this.scene.add.rectangle(
      centerX,
      centerY + size/2 + 8,
      size - 8,
      6,
      0x000000,
      0.8
    );
    this.bars.add(this.progressBarBg);
    
    this.progressBar = this.scene.add.rectangle(
      centerX - (size-8)/2,
      centerY + size/2 + 8,
      0,
      6,
      0xffff00
    ).setOrigin(0, 0.5);
    this.bars.add(this.progressBar);

    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    this.progressBar.setVisible(false);
    this.progressBarBg.setVisible(false);

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    if (this.state === BUILDING_STATES.CONSTRUCTION) {
      this.container.setAlpha(0.7);
      this.border.setStrokeStyle(2, 0xffff00, 1);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
    this.upgradePanel = this.scene.add.container(
      (this.x + this.type.size) * 32 + 10, 
      this.y * 32
    );
    this.upgradePanel.setVisible(false);

    // –§–æ–Ω –ø–∞–Ω–µ–ª–∏
    this.upgradePanelBg = this.scene.add.rectangle(
      0,
      0,
      120,
      32 * this.type.size,
      0x000000,
      0.7
    );
    this.upgradePanelBg.setOrigin(0, 0);
    this.upgradePanel.add(this.upgradePanelBg);

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
    this.upgradeButtons = [];
    if (this.type.upgrades) {
      let yOffset = 10;
      for (const upgrade of this.type.upgrades) {
        const button = this.scene.add.container(10, yOffset);
        
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏
        const buttonBg = this.scene.add.rectangle(0, 0, 100, 30, 0x444444);
        buttonBg.setOrigin(0, 0);
        button.add(buttonBg);
        
        // –ò–∫–æ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
        if (upgrade.icon) {
          const icon = this.scene.add.image(5, 15, upgrade.icon);
          icon.setScale(0.8);
          button.add(icon);
        }
        
        // –¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è
        const text = this.scene.add.text(35, 8, upgrade.name, {
          fontSize: '12px',
          color: '#ffffff'
        });
        button.add(text);
        
        // –°—Ç–æ–∏–º–æ—Å—Ç—å
        const cost = this.scene.add.text(35, 20, `${upgrade.cost}`, {
          fontSize: '10px',
          color: '#ffff00'
        });
        button.add(cost);
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        buttonBg.setInteractive();
        buttonBg.on('pointerover', () => {
          buttonBg.setFillStyle(0x666666);
        });
        buttonBg.on('pointerout', () => {
          buttonBg.setFillStyle(0x444444);
        });
        buttonBg.on('pointerdown', () => {
          if (this.scene.playerController.canAfford(upgrade.cost)) {
            this.applyUpgrade(upgrade);
            this.scene.playerController.spendResources(upgrade.cost);
          }
        });
        
        this.upgradePanel.add(button);
        this.upgradeButtons.push(button);
        yOffset += 40;
      }
    }
  }

  startConstructionAnimation() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.scene.tweens.add({
      targets: this.container,
      scaleY: { from: 0, to: 1 },
      duration: 500,
      ease: 'Back.easeOut'
    });

    // –ß–∞—Å—Ç–∏—Ü—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    this.constructionParticles = this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: -50, max: 50 },
      scale: { start: 1, end: 0 },
      blendMode: 'ADD',
      lifespan: 1000,
      quantity: 2,
      frequency: 100,
      tint: 0xffff00
    });
  }

  update(time, delta) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    if (this.state === BUILDING_STATES.CONSTRUCTION) {
      this.constructionProgress += delta / 1000;
      const progress = this.constructionProgress / this.constructionTime;
      this.progressBar.width = (this.type.size * 32 - 8) * progress;
      
      if (this.constructionProgress >= this.constructionTime) {
        this.completeConstruction();
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–∞
    const hpRatio = this.hp / this.maxHP;
    this.hpBar.width = (this.type.size * 32 - 8) * hpRatio;
    this.hpBar.fillColor = hpRatio > 0.6 ? 0x00ff00 : hpRatio > 0.3 ? 0xffff00 : 0xff0000;

    // –ü—É–ª—å—Å–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
    if (this.state === BUILDING_STATES.PRODUCING) {
      this.border.setStrokeStyle(2, 0xffffff, 
        0.3 + 0.2 * Math.sin(time / 200)
      );
    }
  }

  completeConstruction() {
    this.state = BUILDING_STATES.IDLE;
    this.progressBar.setVisible(false);
    this.progressBarBg.setVisible(false);
    this.container.setAlpha(1);
    this.border.setStrokeStyle(2, 0xffffff, 0.5);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    if (this.constructionParticles) {
      this.constructionParticles.stop();
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    this.scene.tweens.add({
      targets: this.container,
      scaleX: { from: 1, to: 1.1 },
      scaleY: { from: 1, to: 1.1 },
      duration: 200,
      yoyo: true,
      ease: 'Quad.easeOut'
    });

    // –í—Å–ø—ã—à–∫–∞ —á–∞—Å—Ç–∏—Ü
    this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: 50, max: 100 },
      scale: { start: 1, end: 0 },
      blendMode: 'ADD',
      lifespan: 800,
      quantity: 20,
      tint: 0xffff00
    });
  }

  takeDamage(amount) {
    const oldHp = this.hp;
    this.hp = Math.max(0, this.hp - amount);
    
    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
    this.scene.tweens.add({
      targets: this.sprite,
      alpha: { from: 1, to: 0.3 },
      duration: 100,
      yoyo: true
    });

    // –ß–∞—Å—Ç–∏—Ü—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
    this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: 50, max: 100 },
      scale: { start: 1, end: 0 },
      blendMode: 'ADD',
      lifespan: 500,
      quantity: Math.ceil(amount / 10),
      tint: 0xff0000
    });

    if (this.hp === 0 && oldHp > 0) {
      this.destroy();
    }
  }

  destroy() {
    this.state = BUILDING_STATES.DESTROYED;
    
    // –ë–æ–ª—å—à–æ–π –≤–∑—Ä—ã–≤
    this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: 100, max: 200 },
      scale: { start: 2, end: 0 },
      blendMode: 'ADD',
      lifespan: 1000,
      quantity: 50,
      tint: [0xff0000, 0xff8800, 0xffff00]
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
    this.scene.tweens.add({
      targets: this.container,
      scaleY: 0,
      angle: 15,
      alpha: 0,
      duration: 800,
      ease: 'Back.easeIn',
      onComplete: () => {
        this.container.destroy();
        this.particles.destroy();
        this.scene.playerController.removeBuilding(this);
      }
    });
  }

  startProduction() {
    this.state = BUILDING_STATES.PRODUCING;
    this.progressBar.setVisible(true);
    this.progressBarBg.setVisible(true);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    this.productionParticles = this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: 20, max: 40 },
      scale: { start: 0.5, end: 0 },
      blendMode: 'ADD',
      frequency: 500,
      tint: 0x00ffff
    });
  }

  stopProduction() {
    if (this.productionParticles) {
      this.productionParticles.stop();
    }
    this.state = BUILDING_STATES.IDLE;
    this.progressBar.setVisible(false);
    this.progressBarBg.setVisible(false);
    this.border.setStrokeStyle(2, 0xffffff, 0.5);
  }

  select() {
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
    this.border.setStrokeStyle(2, 0xffff00, 1);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π
    if (this.type.upgrades && this.type.upgrades.length > 0) {
      this.upgradePanel.setVisible(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
      this.upgradeButtons.forEach((button, index) => {
        const upgrade = this.type.upgrades[index];
        const canAfford = this.scene.playerController.canAfford(upgrade.cost);
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
        const buttonBg = button.getAt(0);
        buttonBg.setFillStyle(canAfford ? 0x444444 : 0x222222);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (canAfford) {
          buttonBg.setInteractive();
        } else {
          buttonBg.disableInteractive();
        }
      });
    }
  }

  deselect() {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    this.border.setStrokeStyle(2, 0xffffff, 0.5);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π
    if (this.upgradePanel) {
      this.upgradePanel.setVisible(false);
    }
  }

  applyUpgrade(upgrade) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
    if (upgrade.effects) {
      for (const [key, value] of Object.entries(upgrade.effects)) {
        if (typeof this[key] === 'number') {
          this[key] *= value;
        } else {
          this[key] = value;
        }
      }
    }

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
    this.scene.tweens.add({
      targets: this.container,
      scaleX: { from: 1, to: 1.1 },
      scaleY: { from: 1, to: 1.1 },
      duration: 200,
      yoyo: true,
      ease: 'Quad.easeOut'
    });

    // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü —É–ª—É—á—à–µ–Ω–∏—è
    this.particles.emit('particle', {
      x: this.x * 32 + this.type.size * 16,
      y: this.y * 32 + this.type.size * 16,
      speed: { min: 50, max: 100 },
      scale: { start: 1, end: 0 },
      blendMode: 'ADD',
      lifespan: 800,
      quantity: 20,
      tint: 0x00ff00
    });
  }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∫–ª–∞–¥–∞
export class StorageBuildingController extends BuildingController {
  constructor(scene, x, y, buildingType) {
    super(scene, x, y, buildingType);
    this.resourceLimits = {
      wood: 200,
      stone: 200,
      gold: 200,
      food: 200
    };
  }

  getResourceLimits() {
    return this.resourceLimits;
  }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ñ–∞–±—Ä–∏–∫–∏ —é–Ω–∏—Ç–æ–≤
export class UnitFactoryController extends BuildingController {
  constructor(scene, x, y, buildingType) {
    super(scene, x, y, buildingType);
    this.productionQueue = [];
    this.type = buildingType;
    this.maxQueueSize = buildingType.maxQueueSize || 5;
    this.unitLimitBonus = buildingType.unitLimitBonus || 0;
  }

  canQueueUnit(unitData) {
    if (!unitData) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    if (this.productionQueue.length >= this.maxQueueSize) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    return this.scene.playerController.hasResources(unitData.cost);
  }

  queueUnit(unitData) {
    if (!this.canQueueUnit(unitData)) return false;
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    this.scene.playerController.spendResources(unitData.cost);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.productionQueue.push({
      type: unitData,
      progress: 0,
      buildTime: unitData.buildTime || 5
    });
    
    return true;
  }

  update(time, delta) {
    super.update(time, delta);
    
    if (this.state !== BUILDING_STATES.IDLE) return;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —é–Ω–∏—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
    if (this.productionQueue.length > 0) {
      const current = this.productionQueue[0];
      current.progress += delta / 1000;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      this.progressBar.setVisible(true);
      this.progressBarBg.setVisible(true);
      const progress = current.progress / current.buildTime;
      this.progressBar.setScale(progress, 1);
      
      // –ï—Å–ª–∏ —é–Ω–∏—Ç –≥–æ—Ç–æ–≤
      if (current.progress >= current.buildTime) {
        // –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–∞
        const spawnX = (this.x + this.type.size) * 32;
        const spawnY = (this.y + this.type.size/2) * 32;
        
        let unit;
        switch(current.type.class) {
          case 'worker':
            unit = new WorkerUnit(this.scene, spawnX, spawnY, current.type);
            break;
          case 'combat':
            unit = new CombatUnit(this.scene, spawnX, spawnY, current.type);
            break;
          default:
            unit = new BaseUnit(this.scene, spawnX, spawnY, current.type);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —é–Ω–∏—Ç–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä–æ–∫–∞
        this.scene.playerController.addUnit(unit);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.productionQueue.shift();
        
        // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if (this.productionQueue.length === 0) {
          this.progressBar.setVisible(false);
          this.progressBarBg.setVisible(false);
        }
      }
    }
  }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
export class ResearchLabController extends BuildingController {
  constructor(scene, x, y, buildingType) {
    super(scene, x, y, buildingType);
    this.researchQueue = [];
    this.maxQueueSize = 3;
    this.researching = false;
    
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    this.availableUpgrades = [
      {
        id: 'woodGathering',
        name: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ–±—ã—á–∞ –¥–µ—Ä–µ–≤–∞',
        cost: { wood: 100, gold: 50 },
        bonus: { woodGatheringSpeed: 1.2 },
        researchTime: 30,
        prerequisites: []
      },
      {
        id: 'stoneGathering',
        name: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ–±—ã—á–∞ –∫–∞–º–Ω—è',
        cost: { stone: 100, gold: 50 },
        bonus: { stoneGatheringSpeed: 1.2 },
        researchTime: 30,
        prerequisites: []
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ];
  }

  canResearch(upgradeId) {
    const upgrade = this.availableUpgrades.find(u => u.id === upgradeId);
    if (!upgrade) return false;
    
    return this.researchQueue.length < this.maxQueueSize &&
           this.scene.playerController.hasResources(upgrade.cost) &&
           upgrade.prerequisites.every(preReqId => 
             this.scene.playerController.hasResearch(preReqId)
           );
  }

  queueResearch(upgradeId) {
    if (!this.canResearch(upgradeId)) return false;
    
    const upgrade = this.availableUpgrades.find(u => u.id === upgradeId);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    this.scene.playerController.spendResources(upgrade.cost);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.researchQueue.push({
      upgrade,
      progress: 0
    });
    
    if (!this.researching) this.startResearch();
    return true;
  }

  startResearch() {
    if (this.researchQueue.length === 0 || this.researching) return;
    
    this.researching = true;
    this.state = BUILDING_STATES.PRODUCING;
    this.progressBar.setVisible(true);
    this.progressBarBg.setVisible(true);
  }

  update(time, delta) {
    super.update(time, delta);
    
    if (this.state !== BUILDING_STATES.PRODUCING || this.researchQueue.length === 0) return;
    
    const currentResearch = this.researchQueue[0];
    currentResearch.progress += delta / 1000;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progress = currentResearch.progress / currentResearch.upgrade.researchTime;
    this.progressBar.width = (this.type.size * 32 - 8) * progress;
    
    if (currentResearch.progress >= currentResearch.upgrade.researchTime) {
      this.completeResearch(currentResearch);
    }
  }

  completeResearch(research) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    this.scene.playerController.addResearch(research.upgrade);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    this.researchQueue.shift();
    
    if (this.researchQueue.length > 0) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
      this.startResearch();
    } else {
      // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
      this.researching = false;
      this.state = BUILDING_STATES.IDLE;
      this.progressBar.setVisible(false);
      this.progressBarBg.setVisible(false);
    }
  }
}

export default {
  BuildingController,
  StorageBuildingController,
  UnitFactoryController,
  ResearchLabController,
  BUILDING_STATES,
  BUILDING_TYPES
}; 